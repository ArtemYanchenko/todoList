{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","addTask","trim","id","onClick","removeTodolist","value","onChange","e","currentTarget","onKeyUp","key","className","tasks","length","map","t","type","changeStatus","checked","check","removeTask","filter","changeFilter","App","todolistId","filteredTasks","tasksObj","setTasksObj","todolist","todolists","find","tl","setTodoLists","newTask","v1","taskID","task","filteredTodolist","todolistId1","todolistId2","taskForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a26c0d7e.chunk.js","sourcesContent":["import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\nimport {FilterValuesType} from './App';\n\nexport type TaskType = {\n    id: string\n    title: string\n    check: boolean\n}\n\nexport type PropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    filter: FilterValuesType\n    addTask: (title: string, todolistId: string) => void\n    removeTask: (id: string, todolistId: string) => void\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\n    changeStatus: (taskID: string, check: boolean, todolistId: string) => void\n    removeTodolist:(todolistid:string)=>void\n}\n\nfunction Todolist(props: PropsType) {\n    const [title, setTitle] = useState<string>('');\n    const [error, setError] = useState<boolean>(false);\n    const addTask = () => {\n        if (title.trim() === '') {\n            setError(true)\n            return\n        }\n        ;\n        props.addTask(title.trim(), props.id)\n        setTitle('');\n    }\n\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value);\n        error && setError(false);\n    }\n    const onKeyUpHandler = (e: KeyboardEvent) => {\n        e.key === 'Enter' && addTask();\n        error && setError(true)\n    }\n    const onAllClickHandler = () => props.changeFilter('all', props.id);\n    const onActiveClickHandler = () => props.changeFilter('active', props.id);\n    const onComplitedClickHandler = () => props.changeFilter('complited', props.id);\n\n\n    return (\n        <div>\n            <h3>{props.title}\n                <button onClick={ () => props.removeTodolist(props.id)}>X</button>\n            </h3>\n            <div>\n                <input\n                    value={title}\n                    onChange={onChangeSetTitle}\n                    onKeyUp={onKeyUpHandler}\n                    className={error ? 'error' : ''}\n                />\n                <button onClick={() => addTask()}>+</button>\n                {error && <div className={'errorMessage'}>Title is required !</div>}\n            </div>\n            <ul>\n                {\n                    props.tasks.length ? props.tasks.map((t) => {\n\n                        const onRemoveHandler = () => props.removeTask(t.id, props.id);\n                        const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeStatus(t.id, e.currentTarget.checked, props.id)\n                        return (\n                            <li key={t.id}><input\n                                type=\"checkbox\"\n                                onChange={onChangeStatus}\n                                checked={t.check}/>\n                                <span className={t.check ? 'checked' : ''}>{t.title}</span>\n                                <button onClick={onRemoveHandler}>X</button>\n                            </li>\n                        )\n                    }) : <span className={'emptyError'}>Your todolist is empty</span>\n                }\n            </ul>\n            <div>\n                <button className={props.filter === 'all' ? 'active' : ''}\n                        onClick={onAllClickHandler}>All\n                </button>\n                <button className={props.filter === 'active' ? 'active' : ''}\n                        onClick={onActiveClickHandler}>Active\n                </button>\n                <button className={props.filter === 'complited' ? 'active' : ''}\n                        onClick={onComplitedClickHandler}>Completed\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Todolist;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Todolist, {TaskType} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport todolist from './Todolist';\r\n\r\nexport type FilterValuesType = 'all' | 'complited' | 'active';\r\n\r\ntype TodolistsType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n\r\n    const removeTask = (id: string, todolistId: string) => {\r\n        let tasks = tasksObj[todolistId];\r\n        let filteredTasks = tasks.filter(t => t.id !== id);\r\n        tasksObj[todolistId] = filteredTasks;\r\n        setTasksObj({...tasksObj});\r\n    }\r\n\r\n    const changeFilter = (value: FilterValuesType, todolistId: string) => {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodoLists([...todolists])\r\n        }\r\n    }\r\n\r\n    const addTask = (title: string, todolistId: string) => {\r\n        let tasks = tasksObj[todolistId]\r\n        let task: TaskType = {id: v1(), title: title, check: false}\r\n        let newTask = [task, ...tasks];\r\n        tasksObj[todolistId] = newTask\r\n        setTasksObj({...tasksObj});\r\n    }\r\n\r\n    const changeStatus = (taskID: string, check: boolean, todolistId: string) => {\r\n        let tasks = tasksObj[todolistId];\r\n        let task = tasks.find(t => t.id === taskID);\r\n        if (task) {\r\n            task.check = check;\r\n            setTasksObj({...tasksObj})\r\n        }\r\n\r\n    }\r\n\r\n    const removeTodolist = (todolistId: string) => {\r\n        let filteredTodolist = todolists.filter(t => t.id !== todolistId);\r\n        setTodoLists(filteredTodolist);\r\n\r\n        delete tasksObj[todolistId];\r\n        setTasksObj({...tasksObj});\r\n    }\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodoLists] = useState<Array<TodolistsType>>([\r\n        {id: todolistId1, title: 'What to learn', filter: 'active'},\r\n        {id: todolistId2, title: 'What to buy', filter: 'complited'}\r\n    ])\r\n    let [tasksObj, setTasksObj] = useState({\r\n        [todolistId1]: [\r\n            {id: v1(), title: 'HTML+CSS', check: true},\r\n            {id: v1(), title: 'JS', check: true},\r\n            {id: v1(), title: 'React', check: false},\r\n            {id: v1(), title: 'Redux', check: false},\r\n            {id: v1(), title: 'GraphQL', check: false},\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: 'Milk', check: true},\r\n            {id: v1(), title: 'Book', check: false}\r\n        ]\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            {\r\n\r\n                todolists.map((tl) => {\r\n                    let taskForTodoList = tasksObj[tl.id];\r\n                    if (tl.filter === 'complited') {\r\n                        taskForTodoList = taskForTodoList.filter(t => t.check === true)\r\n                    }\r\n                    if (tl.filter === 'active') {\r\n                        taskForTodoList = taskForTodoList.filter(t => t.check === false)\r\n                    }\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={taskForTodoList}\r\n                        filter={tl.filter}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        changeStatus={changeStatus}\r\n                        removeTodolist={removeTodolist}/>\r\n                })\r\n            }\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}